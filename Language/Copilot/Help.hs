-- | Help to display.
module Language.Copilot.Help (helpStr)

where

helpStr :: String
helpStr =
  unlines
  [ ""
  , "USAGE:"
  , "There are 4 essential Copilot commands.  Each command may take a variety"
  , "of options. We describe the commands then list the possible options."
  , ""
  , " interpret :: Streams -> Int -> (Options -> Options) -> IO ()"
  , " > interpret STREAMS RNDS (noOpts | [$ OPTS])"
  , "   Executes the interpreter for the Copilot specification STREAMS of type"
  , "   'Streams', where the specification is interpreted as a set of mutually-"
  , "   recursive Haskell infinite lists.  The output from the lists is given"
  , "   for RNDS indexes.  RNDS must be greater than 0."
  , ""
  , " compile :: Streams -> String -> (Options -> Options) -> IO ()"
  , " > compile STREAMS FILENAME (noOpts | [$ OPTS])"
  , "   Compiles the Copilot specification STREAMS to constant-time & constant-"
  , "   constant-space C program named FILENAME.c with header FILENAME.h"
  , "   and executable FILENAME."
  , ""
  , "test :: Streams -> Name -> Int -> Bool -> Options -> IO ()"
  , " > test STREAMS FILENAME RNDS BOOL (noOpts | [$ OPTS])"
  , "   Like the compile command, but in addition to a STREAMS and FILENAME"
  , "   argument, takes a takes a RNDS argument telling it how many periods" 
  , "   to execute, and a BOOL stating whether to use GNU's gcov"
  , "   <http://gcc.gnu.org/onlinedocs/gcc/Gcov.html#Gcov> to show coverage"
  , "   metrics over the compiled C program.  BOOL may be 'True' or 'False'."
  , "   If BOOL is True, then ensure you have gcov installed on your system," 
  , "   you're compiling with GCC, and for best results, optimizations are"
  , "   turned off.  The test command executes the interpreter and the compiled"
  , "   C program for that program for the specified number of rounds, comparing"
  , "   the output variables to check equivalence. Between the two.  RNDS must"
  , "   be greater than 0.  Testing external arrays is currently not supported."
  , ""
  , " randomTest :: Int -> Options -> IO ()"
  , " > randomTest RNDS (noOpts | [$ OPTS])"
  , "   Generates a random set of streams & inputs for external variables, and"
  , "   tests the equivalence between the output of the compiled C program and"
  , "   the interpreter over RNDS rounds.  RNDS must be greater than 0.  This"
  , "   command is equivalent to executing the interpret command and the"
  , "   compile command for a randomly-generated stream and comparing the"
  , "   results by-hand.  Throws an error if the outputs differ and prints the"
  , "   conflict to standard error (allowing you to using '> /dev/null' for"
  , "   faster testing).  Testing external arrays is currently not supported."
  , "   When testing random we delete the generating programs after testing" 
  , "   them."
  , ""
  , " randomTests :: Int -> Int -> Options -> IO ()"
  , " > randomTests RNDS PROGS (noOpts | [$ OPTS])"
  , "   Execute randomTest on PROGS programs, each for RNDS periods."
  , ""
  , " > Prelude.putStr $ Prelude.show STREAMS"
  , "   or in GHCI, just"
  , " > STREAMS"
  , "   Pretty-prints the parsed Copilot specification of type 'Streams'."
  , ""
  , " verify :: FilePath -> Int -> String -> IO () (FilePath is a synonym for String)"
  , " > verify PATH/FILE.c n opts (opts are additional options for cbmc.)"
  , "   Calls cbmc, developed by Daniel Kroening \& Edmund Clarke"
  , "   <http://www.cprover.org/cbmc/> on a C file generated by Copilot."
  , "   cbmc is a bounded model-checker that verifies C programs.  While there"
  , "   should be no incorrect C programs generated by the Copilot compiler,"
  , "   cbmc provides independent evidence of this claim.  Specifically, it"
  , "   checks that there are no buffer overflows (both lower and upper), that"
  , "   there are no pointer deferences of NULL, that there is no division by"
  , "   zero, that floating point computations do not result in not-a-number"
  , "   (NaN), and that no uninitialized local variables are used.  The entry"
  , "   point of main() is assumed, and it is also assumed that main() can be"
  , "   unrolled at least n times, where n is an Int.  This command is thus"
  , "   best used when generating a simulation program (see the setSim option)."  
  , "   For more information on the properties checked, see"
  , "   <http://www.cprover.org/cprover-manual/properties.shtml>."
  , ""
  , " > help "
  , "   Displays this help message."
  , ""
  , ""
  , "OPTIONS:"
  , "In the following, we designate the interpreter by (i), the compiler by (c),"
  , "and the test function by (t).  Options are marked by which tool they are"
  , "relevant to; e.g., (i, t) means that an option is relevant to the"
  , "interpreter and test functions."
  , ""
  , "For each option, there is a default described below."
  , ""
  , "  setE :: Var -> [a] -> Options -> Options                           (i, t)"
  , "  setEB, setEW8, setEW16, setEW32, setEW64, setEI8,"
  , "  setEI16, setEI32, setEI64, setEF, setED"
  , "    default: Nothing (no assignments)" 
  , "    Set the environment for program variables of the appropriate type."
  , "    E.g., for the spec"
  , ""
  , "    t :: Streams"
  , "    t =  \"a\" .= [0,1] ++ extW32 \"ext0\" 7 + extW32 \"ext1\" 8 "
  , "      .| end"
  , ""
  , "    setEW32 \"ext0\" [0,1..] $ setEW32 \"ext1\" [3,3..] baseOpts"  
  , "    assigns external variable \"ext0\" the values 0,1,2... and "
  , "    external variable \"ext1\" the values 3,3,3... over Word32 in the"
  , "    sequential rounds.  "
  , ""
  , "  setV :: Verbose -> Options -> Options                           (i, c, t)"
  , "    default: DefaultVerbose"
  , "    Set the verbosity level.  One of OnlyErrors | DefaultVerbose | Verbose."
  , ""
  , "  setGCC :: String -> Options -> Options                             (c, t)"
  , "    default: \"gcc\""
  , "    Sets the compiler to use, given as a path (String) to the executable."
  , ""
  , "  setDir :: String -> Options -> Options                             (c, t)"
  , "    default: \"./\""
  , "    The location for the generated .c, .h, and binary files.  The"
  , "    path can be either absolute or relative, but MUST containing the"
  , "    trailing '/'."
  , ""
  , "  setC :: String -> Options -> Options                               (c, t)"
  , "    default: -Wall"
  , "    Set the options to pass to the compiler.  E.g.,"
  , "    setC \"-O2\"."
  , ""
  , "  setP :: Period -> Options -> Options                               (c, t)"
  , "    default: automatically computed minimal period."
  , "    Manually set the number of ticks per period for execution.  An error"
  , "    is returned if the number is too small.  For any program, the number"
  , "    of ticks must be at least 2."
  , ""
  , "  setCode :: (Maybe String, Maybe String) -> Options -> Options         (c)"
  , "    default: (Nothing, Nothing)."
  , "    To place arbitrary C code in the generated file.  The first element of"
  , "    the pair is code to place above the generated code, and the second"
  , "    element is code to place below.  For writing ad-hoc C, please see"
  , "    Language.Copilot.AdHocC (and please add to it and send patches!)."
  , "    For exmple, pre-code might include 'includes'.  Post-code might include"
  , "    a custom main() function."  
  , "" 
  , "  setSim :: Int -> Options -> Options                                          (c)"
  , "    default: 0"
  , "    When used, generates a main() function in the generated C file that"
  , "    includes a driver to call the scheduler to simulate the function and"
  , "    print the reults to standard out.  Additionally, we attempt to compile"
  , "    the code when setSim is used and execute it for i iterations, given as"
  , "    an argument."
  , ""
  , "  setArrs :: [(String,Int)] -> Options -> Options                       (c)"
  , "    default: Nothing" 
  , "    When generating C programs to test, we don't know how large external"
  , "    arrays are, so we cannot declare them.  Passing in pairs containing the"
  , "    name of the array and it's size allows them to be declared."  
  , ""
  , ""
  , "EXAMPLES:"
  , "The following examples reference Copilot specs defined in"
  , "Language.Copilot.Examples.Examples."
  , ""
  , " > interpret t0 50 baseOpts"
  , "   Interprets t0 for 50 iterations."
  , ""
  , " > interpret t3 40"
  , "     $ setEW32 \"ext0\" [0,1..]"
  , "     $ setEW32 \"ext1\" [3,3..]"
  , "     $ setV Verbose baseOpts"
  , "   Interpret t3 for 40 iterations, seeding the external variable \"ext\""
  , "   to [0,1,..], with 'Verbose' verbosity."
  , ""
  , " > compile t1 \"t1\" baseOpts"
  , "   Compile Copilot spec t1 to t1.c, t1.h, and executable t1 in the default"
  , "   directory, /tmp/copilot/ ."
  , ""
  , " > compile t2 \"t2\" $ setC \"-O2\" $ setP 100 baseOpts"
  , "   Compile Copilot spec t2 to t2.c, t2.h, and executable t2 in the default"
  , "   directory, /tmp/copilot/ , with optimization level -02 and period 100."
  , "   This is compiled with a simulation main()."
  , ""
  , " > test t1 \"t1\" 10 baseOpts"
  , "   Compile Copilot spec t1 to t1.c, t1.h, and executable t1 in the default"
  , "   directory, /tmp/copilot/ and compare the results with the output of the"
  , "   interpreter." 
  , ""
  , " > randomTest 1000 baseOpts"
  , "   Compare the compiler and interpreter for a randomly-generated Copilot"
  , "   spec for 1000 iterations."
  , ""
  , " > randomTests 10 1000 baseOpts"
  , "   Compare the compiler and interpreter on 1000 random programs, each"
  , "   executing for 10 periods.  (The 'P.' means the functions come from the"
  , "   Haskell Prelude library.)"
  , ""
  , " > verify \"foo.c\" n baseOpts"
  , "   Calls cbmc on foo.c (where foo.c is in the current directory) and"
  , "   unrolls the program n times."
  ]
