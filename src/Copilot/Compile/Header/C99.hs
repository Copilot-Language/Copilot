--------------------------------------------------------------------------------
-- Copyright Â© 2011 National Institute of Aerospace / Galois, Inc.
--------------------------------------------------------------------------------

-- | Generates a C99 header from a copilot-specification. The functionality
-- provided by the header must be implemented by back-ends targetting C99.

module Copilot.Compile.Header.C99
  ( genC99Header
  , c99HeaderName
  ) where

import Copilot.Core
import Copilot.Core.Version
import Data.List (intersperse)
import Text.PrettyPrint.HughesPJ
import Prelude hiding (unlines)

--------------------------------------------------------------------------------

genC99Header :: Maybe String -> FilePath -> Spec -> IO ()
genC99Header mprefix path spec =
  let
    filePath = path ++ "/" ++ prefix ++ "copilot.h"
    prefix   = case mprefix of
                 Just cs -> cs ++ "_"
                 _       -> ""
  in
    writeFile filePath (c99Header prefix spec)

c99HeaderName :: Maybe String -> String
c99HeaderName (Just cs) = cs ++ "_" ++ "copilot.h"
c99HeaderName _         = "copilot.h"

c99Header :: String -> Spec -> String
c99Header prefix spec = render $ concatH $
  [ text "/* Generated by Copilot Core v." <+> text version <+> text "*/"
  , text ""
  , ppHeaders
  , text ""
  , text "/* Observers (defined by Copilot): */"
  , text ""
  , ppObservers prefix (specObservers spec)
  , text ""
  , text "/* Triggers (must be defined by user): */"
  , text ""
  , ppTriggerPrototypes prefix (specTriggers spec)
  , text ""
  , text "/* External variables (must be defined by user): */"
  , text ""
  , ppExternalVariables (externVars spec)
  , text ""
  , text "/* External arrays (must be defined by user): */"
  , text ""
  , ppExternalArrays (externArrays spec)
  , text ""
  , text "/* External functions (must be defined by user): */"
  , text ""
  , ppExternalFunctions (externFuns spec)
  , text ""
  , text "/* Step function: */"
  , text ""
  , ppStep prefix
  ]

--------------------------------------------------------------------------------

ppHeaders :: Doc
ppHeaders = unlines
  [ "#include <stdint.h>"
  , "#include <stdbool.h>"
  ]

--------------------------------------------------------------------------------

ppObservers :: String -> [Observer] -> Doc
ppObservers prefix = concatH . map ppObserver

  where

  ppObserver :: Observer -> Doc
  ppObserver
    Observer
      { observerName     = name
      , observerExprType = t } =
          string "extern" <+> string (typeSpec (UType t)) <+>
          string (prefix ++ name) <> text ";"

--------------------------------------------------------------------------------

ppTriggerPrototypes :: String -> [Trigger] -> Doc
ppTriggerPrototypes prefix = concatH . map ppTriggerPrototype

  where

  ppTriggerPrototype :: Trigger -> Doc
  ppTriggerPrototype
    Trigger
      { triggerName = name
      , triggerArgs = args } =
          string "void" <+> string (prefix ++ name) <>
          string "(" <> ppArgs args <> string ");"

    where

    ppArgs :: [UExpr] -> Doc
    ppArgs = concatH . intersperse (text ",") . map ppArg

    ppArg :: UExpr -> Doc
    ppArg UExpr { uExprType = t } = text (typeSpec (UType t))

--------------------------------------------------------------------------------

ppExternalVariables :: [ExternVar] -> Doc
ppExternalVariables = concatH . map ppExternalVariable

ppExternalVariable :: ExternVar -> Doc
ppExternalVariable
  ExternVar
    { externVarName = name
    , externVarType = t } =
        string "extern" <+> text (typeSpec t) <+> text name <> text ";"

--------------------------------------------------------------------------------

ppExternalArrays :: [ExternArray] -> Doc
ppExternalArrays = concatH . map ppExternalArray

ppExternalArray :: ExternArray -> Doc
ppExternalArray
  ExternArray
    { externArrayName = name
    , externArrayType = t } =
        string "extern" <+> text (typeSpec t) <+> text "*" <+>
        text name <> text ";"

--------------------------------------------------------------------------------

ppExternalFunctions :: [ExternFun] -> Doc
ppExternalFunctions = concatH . map ppExternalFunction

ppExternalFunction :: ExternFun -> Doc
ppExternalFunction
  ExternFun
    { externFunName      = name
    , externFunType      = t
    , externFunArgsTypes = args } =
        string (typeSpec t) <+> string name <>
        string "(" <> ppArgs args <> string ");"

  where

  ppArgs :: [UType] -> Doc
  ppArgs = concatH . intersperse (text ",") . map ppArg

  ppArg :: UType -> Doc
  ppArg UType { uTypeType = t1 } = text (typeSpec (UType t1))

--------------------------------------------------------------------------------

typeSpec :: UType -> String
typeSpec UType { uTypeType = t } = typeSpec' t

  where

  typeSpec' (Bool   _) = "bool"
  typeSpec' (Int8   _) = "int8_t"
  typeSpec' (Int16  _) = "int16_t"
  typeSpec' (Int32  _) = "int32_t"
  typeSpec' (Int64  _) = "int64_t"
  typeSpec' (Word8  _) = "uint8_t"
  typeSpec' (Word16 _) = "uint16_t"
  typeSpec' (Word32 _) = "uint32_t"
  typeSpec' (Word64 _) = "uint64_t"
  typeSpec' (Float  _) = "float"
  typeSpec' (Double _) = "double"

--------------------------------------------------------------------------------

ppStep :: String -> Doc
ppStep prefix = text "void" <+> text (prefix ++ "step") <> text "();"

--------------------------------------------------------------------------------

-- Utility functions:

string :: String -> Doc
string = text

concatH :: [Doc] -> Doc
concatH = foldr ($$) empty

unlines :: [String] -> Doc
unlines = concatH . map text
